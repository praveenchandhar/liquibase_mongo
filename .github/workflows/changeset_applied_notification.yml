name: Changeset Applied Notification

on:
  pull_request:
    paths:
      - json_changesets/**
    types:
      - closed # Trigger only when PR is closed (and potentially merged)

jobs:
  notify-ready-to-apply:
    if: ${{ github.event.pull_request.merged == true }} # Ensure only merged PRs trigger the workflow
    name: Notify Ready to Apply Changeset
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Detect Merged XML Files
      - name: Detect Merged XML Files
        id: detect_xml
        run: |
          echo "=== Detecting Merged XML Files ==="
          
          MERGE_COMMIT_SHA=${{ github.event.pull_request.merge_commit_sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          
          # Get XML files from the merge
          XML_FILES=$(git diff-tree --no-commit-id --name-only -r $MERGE_COMMIT_SHA 2>/dev/null | { grep 'json_changesets/.*\.xml' || true; })
          
          if [ -z "$XML_FILES" ]; then
            # Fallback: check diff between base and head
            XML_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA 2>/dev/null | { grep 'json_changesets/.*\.xml' || true; })
          fi
          
          if [ -z "$XML_FILES" ]; then
            echo "❌ No XML files found"
            echo "has_xml_files=false" >> $GITHUB_ENV
          else
            echo "✅ XML files detected:"
            echo "$XML_FILES"
            
            # Get the first XML file for version extraction
            FIRST_XML=$(echo "$XML_FILES" | head -n 1)
            VERSION=$(basename "$FIRST_XML" .xml)
            
            echo "xml_files_list=$XML_FILES" >> $GITHUB_ENV
            echo "has_xml_files=true" >> $GITHUB_ENV
            echo "version=$VERSION" >> $GITHUB_ENV
            
            # Extract context from the XML file
            if [ -f "$FIRST_XML" ]; then
              CONTEXT=$(grep -oP 'context="[^"]*"' "$FIRST_XML" | head -n 1 | sed 's/context="//; s/"//' || echo "liquibase_test")
              echo "context=$CONTEXT" >> $GITHUB_ENV
              echo "✅ Context extracted: $CONTEXT"
            else
              echo "context=liquibase_test" >> $GITHUB_ENV
            fi
          fi

      # Step 3: Post Application Instructions
      - name: Post Application Instructions
        if: env.has_xml_files == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Posting Application Instructions ==="
          
          # Create application instructions comment
          cat > application_instructions.md << 'EOF'
          ## 🔄 Next Steps

          - **Review** the generated changeset ✅
          - **Verify** the MongoDB operations are correct ✅  
          - **Merge** the changeset PR when ready ✅
          - **Apply** changes using: `/liquibase update ${{ env.context }}`

          ## 💡 How to Apply These Changes
          **Once you merge the changeset PR, use this command in a comment:**

          ```
          /liquibase update ${{ env.context }}
          ```

          **Or for a specific version:**
          ```
          /liquibase update ${{ env.context }} ${{ env.version }}
          ```

          ---
          *🤖 This comment was automatically generated by the Changeset Generator workflow.*  
          *⚡ Workflow Run: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*
          EOF
          
          # Post comment using GitHub CLI
          gh pr comment ${{ github.event.pull_request.number }} --body-file application_instructions.md
          
          echo "✅ Application instructions posted on PR #${{ github.event.pull_request.number }}"

      # Step 4: Summary
      - name: Workflow Summary
        if: always()
        run: |
          echo "=== Changeset Applied Notification Summary ==="
          if [ "${{ env.has_xml_files }}" = "true" ]; then
            echo "✅ XML changesets detected and ready to apply"
            echo "✅ Context: ${{ env.context }}"
            echo "✅ Version: ${{ env.version }}"
            echo "✅ Application instructions posted on PR #${{ github.event.pull_request.number }}"
          else
            echo "ℹ️  No XML changeset files found in this merge"
          fi
          echo "=== End Summary ==="
