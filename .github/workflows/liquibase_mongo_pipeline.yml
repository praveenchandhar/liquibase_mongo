name: Liquibase MongoDB Workflow

on:
  workflow_dispatch:
    inputs:
      query:
        description: "MongoDB query for Liquibase changeset generation"
        required: true
      author:
        description: "Author for the changeset"
        required: true
      context:
        description: "Database context name"
        required: true
      ticketID:
        description: "Ticket ID for branch creation and tracking"
        required: true

jobs:
  generate_changeset:
    name: Generate Liquibase Changeset
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository code
      - name: Checkout Repository Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full branch history

      # Step 2: Set Up Python Environment
      - name: Set Up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Step 3: Install Python Dependencies
      - name: Install Python Dependencies
        run: |
          echo "Installing dependencies..."
          pip install "openai==0.28"

      # Step 4: Create New Feature Branch
      - name: Create New Branch for Feature
        run: |
          echo "Creating branch: feature/${{ inputs.ticketID }}"
          git checkout -b "feature/${{ inputs.ticketID }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Run Python Script for Changeset Appending
      - name: Run Python Script
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Running Python script to update changelog.xml..."
          python scripts/v2.py \
            --query "${{ inputs.query }}" \
            --author "${{ inputs.author }}" \
            --context "${{ inputs.context }}" \
            --changelog "changeset/changelog.xml"

      # Step 6: Debug Local Workspace (Verify Changes)
      - name: Debug Updated Directory Locally
        run: |
          echo "Listing 'changeset/' directory files..."
          ls -l changeset/
          echo "Displaying updated changelog.xml locally:"
          cat changeset/changelog.xml

      # Step 7: Add and Commit Changes to Feature Branch
      - name: Commit Changes
        run: |
          echo "Committing updated changelog.xml to feature/${{ inputs.ticketID }}..."
          git config user.name "praveen_automation"
          git config user.email "praveenchandhar194@gmail.com"
          git add changeset/changelog.xml
          git status
          git diff --cached || echo "No changes staged for commit."
          git diff --cached --quiet || git commit -m "Updated changelog.xml for MongoDB query: ${{ inputs.query }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Push Feature Branch to Remote Repository
      - name: Push Feature Branch to Remote
        run: |
          echo "Pushing branch feature/${{ inputs.ticketID }} to remote repository..."
          git push --set-upstream origin "feature/${{ inputs.ticketID }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 9: Verify Changes Locally in Feature Branch (Debugging Step)
      - name: Verify Changes in Remote Feature Branch
        run: |
          echo "Switching to and verifying feature/${{ inputs.ticketID }}..."
          git fetch origin "feature/${{ inputs.ticketID }}"
          git checkout "feature/${{ inputs.ticketID }}" --force
          echo "Displaying changelog.xml in feature/${{ inputs.ticketID }} branch:"
          cat changeset/changelog.xml
