name: Liquibase MongoDB Workflow

on:
  workflow_dispatch:
    inputs:
      query:
        description: "MongoDB query for Liquibase changeset generation"
        required: true
      author:
        description: "Author for the changeset"
        required: true
      context:
        description: "Database context name"
        required: true
      ticketID:
        description: "Ticket ID (used for branch creation and tracking)"
        required: true

jobs:
  generate_changeset:
    name: Generate Liquibase Changeset
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository code
      - name: Checkout Repository Code
        uses: actions/checkout@v3

      # Step 2: Set Up Python Environment
      - name: Set Up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Step 3: Install Python Dependencies
      - name: Install Python Dependencies
        run: pip install "openai==0.28"

      # Step 4: Create and Switch to a New Branch
      - name: Create and Switch to Branch
        run: git checkout -b "feature/${{ inputs.ticketID }}"

      # Step 5: Run Python Script to Generate and Append Liquibase Changeset
      - name: Generate and Append Liquibase Changeset
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/v2.py \
            --query "$(printf '%s' '${{ inputs.query }}')" \
            --author "${{ inputs.author }}" \
            --context "${{ inputs.context }}" \
            --changelog "changeset/changelog.xml"

      # Step 6: Commit Changes to the Branch
      - name: Commit Changes to Feature Branch
        run: |
          git config user.name "praveen_automation"
          git config user.email "praveenchandhar194@gmail.com"
          git add changeset/changelog.xml
          git diff --cached --quiet || git commit -m "Add changeset for MongoDB query (${{ inputs.query }})"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Push Feature Branch
      - name: Push Feature Branch
        run: git push --set-upstream origin "feature/${{ inputs.ticketID }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Step 8: Create Pull Request
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "feature/${{ inputs.ticketID }}"
          base: main
          title: "Feature: Add changeset for query ${{ inputs.query }}"
          body: |
            This pull request adds a new Liquibase changeset for MongoDB query:
            - **Query**: ${{ inputs.query }}
            - **Author**: ${{ inputs.author }}
            - **Context**: ${{ inputs.context }}

  await_approval:
    name: Await Manual Approval on PR
    runs-on: ubuntu-latest
    needs: generate_changeset

    steps:
      # Step 1: Check Approval via Comments
      - name: Poll for Approval via PR Comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            const { data: pullRequests } = await github.pulls.list({
              owner,
              repo,
              head: context.repo + ':' + 'feature/${{ inputs.ticketID }}',
              state: 'open'
            })

            if (pullRequests.length === 0) throw new Error('No open pull request found.')

            const prNumber = pullRequests[0].number
            const { data: comments } = await github.issues.listComments({
              owner,
              repo,
              issue_number: prNumber
            })

            const approved = comments.some(comment => comment.body.toLowerCase().includes('approve'))
            
            if (!approved) throw new Error('Approval not found. Add a comment with "approve" on the pull request.')
            
            console.log('Pull request approved!')

  merge_pull_request:
    name: Merge Pull Request After Approval
    runs-on: ubuntu-latest
    needs: await_approval

    steps:
      # Step 1: Merge Pull Request
      - name: Merge Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            const { data: pullRequests } = await github.pulls.list({
              owner,
              repo,
              head: context.repo + ':' + 'feature/${{ inputs.ticketID }}',
              state: 'open'
            })

            if (pullRequests.length === 0) throw new Error('No open pull request found.')

            const prNumber = pullRequests[0].number
            await github.pulls.merge({
              owner,
              repo,
              pull_number: prNumber
            })

            console.log(`Pull Request #${prNumber} has been successfully merged.`)

      # Step 2: Delete Feature Branch
      - name: Delete Feature Branch
        run: git push origin --delete "feature/${{ inputs.ticketID }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
