name: Liquibase MongoDB Workflow

on:
  workflow_dispatch:
    inputs:
      query:
        description: "MongoDB query for Liquibase changeset generation"
        required: true
      author:
        description: "Author for the changeset"
        required: true
      context:
        description: "Database context name"
        required: true
      ticketID:
        description: "Ticket ID (used for branch creation and tracking)"
        required: true

jobs:
  liquibase_flow:
    name: Liquibase Flow
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Ensure pip is up-to-date
        run: python -m pip install --upgrade pip

      - name: Install Python Dependencies
        run: pip install "openai==0.28"

      - name: Create and Switch to Branch
        run: git checkout -b "feature/${{ inputs.ticketID }}"

      - name: Generate Liquibase Changeset
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/v2.py \
            --query "$(printf '%s' '${{ inputs.query }}')" \
            --author "${{ inputs.author }}" \
            --context "${{ inputs.context }}" \
            --changelog "changeset/changelog.xml"

      - name: Commit Changes
        run: |
          git config user.name "praveen_automation"
          git config user.email "praveenchandhar194@gmail.com"
          git add changeset/changelog.xml
          git diff --cached --quiet || git commit -m "Add changeset for MongoDB query: ${{ inputs.query }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Feature Branch
        run: git push --set-upstream origin "feature/${{ inputs.ticketID }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "feature/${{ inputs.ticketID }}"
          base: main
          title: "Feature: Add changeset for query ${{ inputs.query }}"
          body: |
            This pull request adds a new Liquibase changeset for MongoDB query:
            - **Query**: ${{ inputs.query }}
            - **Author**: ${{ inputs.author }}
            - **Context**: ${{ inputs.context }}

      - name: Output PR Link
        run: echo "::notice::Pull Request URL: ${{ steps.create_pr.outputs.pull-request-url }}"

      - name: Await Approval via PR Comment
        uses: actions/github-script@v6
        id: approval_check
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core'); // Import core module for outputs
            const { owner, repo } = context.repo;
            const branchName = "feature/${{ inputs.ticketID }}";

            const { data: pullRequests } = await github.pulls.list({
              owner,
              repo,
              head: `${owner}:${branchName}`,
              state: 'open',
            });

            if (pullRequests.length === 0) {
              throw new Error(`No open pull request found for branch: ${branchName}`);
            }

            const prNumber = pullRequests[0].number;

            const { data: comments } = await github.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });

            const approved = comments.some(comment =>
              comment.body.toLowerCase().includes('approve')
            );

            const denied = comments.some(comment =>
              comment.body.toLowerCase().includes('deny')
            );

            if (approved) {
              core.setOutput("decision", "approved");
            } else if (denied) {
              core.setOutput("decision", "denied");
            } else {
              throw new Error(`No 'approve' or 'deny' comment found on Pull Request #${prNumber}.`);
            }

      - name: Proceed If Approved
        if: steps.approval_check.outputs.decision == 'approved'
        run: echo "Proceeding with merge after approval."

      - name: Abort If Denied
        if: steps.approval_check.outputs.decision == 'denied'
        run: echo "Process aborted due to denial."
