name: Liquibase Commands from PR Comments

on:
  issue_comment:
    types:
      - created  # Trigger when a comment is made in a PR.

jobs:
  liquibase_task:
    if: |
      github.event.issue.pull_request &&
      (
        startsWith(github.event.comment.body, '/liquibase status') ||
        startsWith(github.event.comment.body, '/liquibase update')
      )
    name: Run Liquibase Tasks
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository code
      - name: Checkout Repository Code
        uses: actions/checkout@v3

      # Step 2: Install Liquibase CLI
      - name: Install Liquibase CLI
        run: |
          echo "Installing Liquibase CLI..."
          wget --quiet https://github.com/liquibase/liquibase/releases/download/v4.23.0/liquibase-4.23.0.zip
          unzip liquibase-4.23.0.zip
          chmod +x liquibase
          mv liquibase /usr/local/bin/liquibase
          echo "Liquibase CLI installed successfully!"

      # Step 3: Create Workspace for JARs (Avoiding Root Directories)
      - name: Create Workspace for Liquibase JARs
        run: |
          echo "Creating workspace for Liquibase JARs..."
          mkdir -p $HOME/liquibase-jars
          echo "Workspace created at $HOME/liquibase-jars."

      # Step 4: Restore Cached JARs
      - name: Restore Liquibase JARs Cache
        id: restore_jars_cache
        uses: actions/cache@v3
        with:
          path: $HOME/liquibase-jars
          key: liquibase-jars-v2
          restore-keys: |
            liquibase-jars-

      # Step 5: Download MongoDB Driver and Liquibase JARs (if Cache Miss)
      - name: Setup MongoDB Driver and Liquibase MongoDB Extension (Download Missing Jars)
        if: steps.restore_jars_cache.outputs.cache-hit != 'true'
        run: |
          echo "Downloading MongoDB driver and Liquibase JAR dependencies..."
          LIQUIBASE_JAR_DIR=$HOME/liquibase-jars
          
          # Required MongoDB drivers
          wget --quiet -O $LIQUIBASE_JAR_DIR/mongodb-driver-core.jar https://search.maven.org/remotecontent?filepath=org/mongodb/mongodb-driver-core/5.4.0/mongodb-driver-core-5.4.0.jar
          wget --quiet -O $LIQUIBASE_JAR_DIR/mongodb-driver-sync.jar https://search.maven.org/remotecontent?filepath=org/mongodb/mongodb-driver-sync/5.4.0/mongodb-driver-sync-5.4.0.jar
          wget --quiet -O $LIQUIBASE_JAR_DIR/bson.jar https://repo1.maven.org/maven2/org/mongodb/bson/5.4.0/bson-5.4.0.jar

          # Liquibase core jar
          wget --quiet -O $LIQUIBASE_JAR_DIR/liquibase-core.jar https://search.maven.org/remotecontent?filepath=org/liquibase/liquibase-core/4.23.0/liquibase-core-4.23.0.jar

          # Additional dependencies
          wget --quiet -O $LIQUIBASE_JAR_DIR/commons-io.jar https://repo1.maven.org/maven2/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar
          wget --quiet -O $LIQUIBASE_JAR_DIR/commons-lang3.jar https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar
          wget --quiet -O $LIQUIBASE_JAR_DIR/picocli.jar https://repo1.maven.org/maven2/info/picocli/picocli/4.6.3/picocli-4.6.3.jar

          # SnakeYAML for YAML parsing
          wget --quiet -O $LIQUIBASE_JAR_DIR/snakeyaml.jar https://repo1.maven.org/maven2/org/yaml/snakeyaml/1.33/snakeyaml-1.33.jar

          # Liquibase MongoDB extension
          wget --quiet -O $LIQUIBASE_JAR_DIR/liquibase-mongodb.jar https://repo1.maven.org/maven2/org/liquibase/ext/liquibase-mongodb/4.31.1/liquibase-mongodb-4.31.1.jar

          echo "MongoDB driver and Liquibase extension setup completed."

      # Step 6: Save JARs to Cache
      - name: Save MongoDB Driver and Liquibase Extension to Cache
        if: steps.restore_jars_cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: $HOME/liquibase-jars
          key: liquibase-jars-v2

      # Step 7: Configure CLASSPATH
      - name: Configure CLASSPATH
        run: |
          export CLASSPATH="$HOME/liquibase-jars/*"
          echo "CLASSPATH set to include all Liquibase and MongoDB dependencies."

      # Step 8: Parse PR Comment Command and Database Names
      - name: Parse PR Comment Command
        id: parse_command
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "Parsing PR comment: $COMMENT_BODY"

          if [[ "$COMMENT_BODY" =~ ^/liquibase[[:space:]]+status[[:space:]]+(.*)$ ]]; then
              echo "COMMAND=status" >> $GITHUB_ENV
              DATABASES=$(echo "$COMMENT_BODY" | sed -E 's/^\/liquibase[[:space:]]+status[[:space:]]+//')
              echo "DATABASES=$DATABASES" >> $GITHUB_ENV
          elif [[ "$COMMENT_BODY" =~ ^/liquibase[[:space:]]+update[[:space:]]+(.*)$ ]]; then
              echo "COMMAND=update" >> $GITHUB_ENV
              DATABASES=$(echo "$COMMENT_BODY" | sed -E 's/^\/liquibase[[:space:]]+update[[:space:]]+//')
              echo "DATABASES=$DATABASES" >> $GITHUB_ENV
          else
              echo "Invalid command."
              exit 1
          fi

      # Step 9: Run Liquibase Commands
      - name: Run Liquibase Command
        run: |
          echo "Running Liquibase command with $COMMAND..."
          for DB in $(echo $DATABASES | tr ',' '\n'); do
              echo "Processing database: $DB"
              if [[ "$COMMAND" == "status" ]]; then
                  liquibase --classpath=$HOME/liquibase-jars/ --url="jdbc:mongodb://$DB" --changeLogFile=db/changelog.xml status
              elif [[ "$COMMAND" == "update" ]]; then
                  liquibase --classpath=$HOME/liquibase-jars/ --url="jdbc:mongodb://$DB" --changeLogFile=db/changelog.xml update
              fi
          done
