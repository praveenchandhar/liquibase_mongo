name: Liquibase Commands from PR Comments

on:
  issue_comment:
    types:
      - created

jobs:
  liquibase_task:
    if: |
      github.event.issue.pull_request &&
      (
        startsWith(github.event.comment.body, '/liquibase status') ||
        startsWith(github.event.comment.body, '/liquibase update')
      )
    name: Run Liquibase Tasks
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository Code
      - name: Checkout Repository Code
        uses: actions/checkout@v3

      # Step 2: Install Liquibase CLI
      - name: Install Liquibase CLI
        run: |
          echo "Installing Liquibase CLI..."
          wget --quiet https://github.com/liquibase/liquibase/releases/download/v4.23.0/liquibase-4.23.0.zip
          unzip liquibase-4.23.0.zip
          chmod +x liquibase
          mv liquibase /usr/local/bin/liquibase
          echo "Liquibase CLI installed successfully."

      # Step 3: Prepare Workspace for Liquibase JARs
      - name: Create Workspace for JARs
        run: mkdir -p $HOME/liquibase-jars

      # Step 4: Restore Cached Liquibase JARs
      - name: Restore Dependencies from Cache
        id: restore_jars_cache
        uses: actions/cache@v3
        with:
          path: $HOME/liquibase-jars
          key: liquibase-jars-v8
          restore-keys: |
            liquibase-jars-

      # Step 5: Download JAR Dependencies (If Not Cached)
      - name: Download Liquibase Dependencies
        if: steps.restore_jars_cache.outputs.cache-hit != 'true'
        run: |
          echo "Downloading JARs..."
          wget -P $HOME/liquibase-jars <dependencies like mongodb-driver-core.jar>
          echo "Downloaded to $HOME/liquibase-jars."

      # Step 6: Save Dependencies to Cache
      - name: Save JARs to Cache
        if: steps.restore_jars_cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: $HOME/liquibase-jars
          key: liquibase-jars-v8

      # Step 7: Parse PR Comment
      - name: Parse PR Comments
        run: |
          if [[ "${{ github.event.comment.body }}" =~ ^/liquibase[[:space:]]+(.*)$ ]]; then
              echo "COMMAND=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          else
              echo "Invalid command."
              exit 1
          fi

      # Step 8: Run `liquibase_runner.sh`
      - name: Execute Runner Script
        run: |
          chmod +x scripts/liquibase_runner.sh
          ./scripts/liquibase_runner.sh "${COMMAND}"
